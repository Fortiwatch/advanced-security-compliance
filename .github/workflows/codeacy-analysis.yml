name: Resuable Codacy Security Scan Workflow

on:
  
  workflow_call:
    
    inputs:
      
      directory:
        required: false
        description: "The directory to be analyzed"
        type: string
      
      parallel:
        required: false
        description: "Number of tools to run in parallel"
        type: number
  
      tool:
        required: false
        description: "The name of the tool to analyze the code"
        type: string
  
      tool-timeout:
        required: false
        description: "Maximum time each tool has to execute"
        type: string
      
      fail-if-incomplete:
        required: false
        description: "Fail the analysis if any tool fails to run"
        type: string
      
      
jobs:
  # Codacy
  codacy:
    name: Codacy Analyze
 
    runs-on: ubuntu-latest
    
    permissions:
      # required for all workflows
      security-events: write
      
      # only required for workflows in private repositories
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
    
      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          directory: ${{ inputs.directory }}
          parallel: ${{ inputs.parallel }}
          tool: ${{ inputs.tool }}
          tool-timeout: ${{ inputs.tool-timeout }}
          fail-if-incomplete: ${{ inputs.fail-if-incomplete }}
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
          
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
